# -*- coding: utf-8 -*-
"""Assignment05.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/[REDACTED]

1. This Colab is designed for the course "[REDACTED]" instructed by [REDACTED].

2. First, copy this Colab notebook to your Drive. Then, read the instruction of this assignment. 

3. Rename copied notebbok to **[REDACTED]**. For example, **[REDACTED]**

4. When you complete your assignment, you need to:

  a. First, download your Colab notebook as a IPYNB file

  b. Next, upload downloaded Colab notebook to the specific drive folder [REDACTED] before **[REDACTED]**

  c. Then, please submit the link of your **uploaded** file to [REDACTED]. 
  
  The link of **uploaded** IPYNB file can be found by clicking **Share>Get Link** on the top right.
  
Note that you can re-submit your assigment by replacing the old one.

## Personal Information
Please fill in your details below.

Name: [REDACTED]

Student ID: [REDACTED]

Department/Program: [REDACTED]
"""

# Load packages
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# Used for interact
from ipywidgets import interact, interact_manual, IntSlider, IntText

"""## Define a Fuctnion with Variable-Length Argument

In this week, we showed you how to define a function with variable-length arguments.

Now, we want to define a function ``multi_tasks()`` satisfying the docstring inside.
"""

def multi_tasks(*args):
    """ Description of multi_task function
    Parametes: 
        args: a tuple of scalars (int or float)
    Returns:
        a str or a tuple or a list
            - If args contains 0 elements, then it outputs "Yo, bro！". Note that this returns a string.
            - If args contains 1 element, then print a string whose values is your [REDACTED]. Note that this returns None
            - If args contains 2 numbers, then we plot y=5x^5-6x-6 on [a, b] interaval using 27 points, 
                where a, b are the first and the second element of args, respecticely. Note that this returns None
            - If args contains more than 2 numbers, then we return a function parametric(c, d) which represents compute the value function cx+d based on the value of x,
                where c, d are the first and the last element of args, respecticely. Note that this returns a function. 
    """  
    def plot_square(a: float, b: float):
        x_values = np.linspace(a, b, 27)
        y_values = 5*x_values**5-6*x_values-6
        plt.plot(x_values, y_values)
    
    def parametric(c, d):
        def linear(x: float):
            print(f"{x} times {c} and plus {d} is")
            return c*x+d
        return linear

    ### [BEGIN] Complete this function based on the docstring above ###

    if len(args) == 0:

      return "Yo, bro！"

    elif len(args) == 1:

      print("[REDACTED]")
      return None

    elif len(args) == 2:

      plot_square(args[0],args[1])
      return None

    else:

      return parametric(args[0],args[-1])

    ### [END] Complete this function based on the docstring above ###

help(multi_tasks)

# Run this and the output is a string "Yo, bro."
multi_tasks()

# Run this and a figure will be shown
multi_tasks(2)

# Run this and the output is a figure to plot y=5x^5-6x-6 on [-1.25, 1] interval
multi_tasks(-1.25, 1)

# Run this and the output must be 9*4+87 = 123
multi_tasks(4, 2.3, -5, 87)(9)

"""# (Bonus) Design your own Python exercise 

In this part, you have a chance to be a Pyton instructor. You may each additional 1 point in this assignment with your creativity.

Based on recent course materials, please propose a Python exercise for other classmates. 

Note that you don't need to answer what you propose here. However, you need to describe your exercise as much detail as you can.

CSS, or Cascading Style Sheets, is a language used to describe the presentation of HTML or XML documents.

A typical CSS structure might look like this: 

```css
p {

  border-color: #358;
  border-style: solid;
  border-width: .2em;
  font-family: 'Gill Sans';
  font-size: 2em;
  font-style: italic;
  font-weight: bold;

}
```

This will make all &lt;p> elements rendered like this:

![css.png](https://i.imgur.com/Wwv7Q8w.png)

However, front-end programmers tend to use shorthanded version properties to reduce the number of lines, which are:

```css
p {

  border: .2em solid #358;
  font: italic bold 2em 'Gill Sans';

}
```

The code above is completely equivalent to prior one.

In this exercice, you will need to build a function which receives these shorthanded values and outputs original properties with corresponding values. The syntax of *border* and *font* properties are shown below:

```css
/* border - must contain border-style */

    /* 1 element: represents border-style */
    {border: solid;}

    /* 2 elements: represent border-width, border-style */
    {border: .2em solid;}

    /* 2 elements: represent border-style, border-color */
    {border: solid #358;}

    /* 3 elements: represent border-width, border-style, border-color */
    {border: .2em solid #358;}

/* font - must contain font-size and font-family */

    /* 2 elements: represent font-size, font-family */
    {font: 2em 'Gill Sans';}

    /* 3 elements: represent font-style, font-size, font-family */
    {font: italic 2em 'Gill Sans';}

    /* 3 elements: represent font-weight, font-size, font-family */
    {font: bold 2em 'Gill Sans';}

    /* 4 elements: represent font-style, font-weight, font-size, font-family */
    {font: italic bold 2em 'Gill Sans';}
```

The expected inputs and outputs look like this:

```python
shorthanded_Value_Decoder("solid","#358")

# Expexted output: "border-width: inherit; border-style: solid; border-color: #358;"
```

<br />

**Task 1** Assuming all *border-color* values must start with "#", write down the function *border_Decoder()* which reveals all shorthanded values.

*Tips: All undesignated values in CSS default to be 'inherit'.*

<br /><br />

**Task 2** Write down the function *font_Decoder()* which reveals all shorthanded values.

*Tips: All valid values of font-style are 'italic', 'normal' and 'oblique'; all valid values of font-weight are integers commonly between 0 to 900, 'bold' and 'normal'. All invalid value will result in returning 'inherit'.*
"""

# Task 1 Reference Answer

def border_Decoder(*args):

  if len(args) == 1:

    print(f"border-width: inherit; border-style: {args[0]}; border-color: inherit;")  # style

  if len(args) == 2:

    if args[1][0] == "#":

      print(f"border-width: inherit; border-style: {args[0]}; border-color: {args[1]};")  # style | color

    else:

      print(f"border-width: {args[0]}; border-style: {args[1]}; border-color: inherit;")  # width | style

  if len(args) == 3:

    print(f"border-width: {args[0]}; border-style: {args[1]}; border-color: {args[2]};")  # width | style | color

# Test for Task 1
border_Decoder("solid")
border_Decoder("dotted","#FFF")
border_Decoder("50px","dashed")
border_Decoder("10%","double","#6A7BF4")

# Task 2 Reference Answer

import re

sizeRE = "(?<!\S)(\d*(\.?)\d+( *)(cm|mm|in|px|pt|pc|em|ex|ch|rem|vw|vh|vmin|vmax|%)|inherit)(?!\S)"
styleRE = "(?<!\S)(italic|normal|oblique|inherit)(?!\S)"
weightRE = "(?<!\S)(bold|normal|\d{1,3}|inherit)(?!\S)"

def font_Decoder(*args):

  style = "inherit"
  weight = "inherit"
  size = "inherit"
  family = "inherit"

  if re.search(sizeRE, str(args[-2])): # size will always be in index -2

      size = str(args[-2]).replace(' ', '')
  
  family = str(args[-1]) # family will always be in index -1

  if len(args) == 3:

    if str(args[0]) == "inherit" or str(args[0]) == "normal": # ( style | weight )? | size | family

      style = str(args[0])
      weight = str(args[0])

    elif re.search(styleRE, str(args[0])):

      style = str(args[0])

    elif re.search(weightRE, str(args[0])):

      weight = str(args[0])

  if len(args) == 4: # style | weight | size | family

    if re.search(styleRE, str(args[0])):

      style = str(args[0])

    if re.search(weightRE, str(args[1])):

      weight = str(args[1])

  print(f"font-style: {style}; font-weight: {weight}; font-size: {size}; font-family: {family};")

# Test for Task 2

font_Decoder("4%", "Helvetica") # size | family
font_Decoder("italic", "56mm", "Ubuntu") # style | size | family
font_Decoder("bold", ".1cm", "Consolas") # weight | size | family
font_Decoder("normal", ".2in", "Times New Roman") # 'normal/inherit' | size | family
font_Decoder("oblique", 700, "16px", "Microsoft JHenghei") # style | weight | size | family

print("\nInvalid Examples - invalid items should return \'inherit\'.\n")

font_Decoder("1", "Noto Sans") # Invalid size - missing unit (> To test whether regex recognizes specific keywords.)
font_Decoder("l4em", "Arial") # Invalid size - l4em is not defineded (> To test whether regex matchs the whole string.)